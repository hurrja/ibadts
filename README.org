* Java implementation of IB CS abstract data types
** IB collections, stacks and queues in Java
   This repository contains Java classes that implement abstract data
   types used in IB Computer Science: collections, stacks and queues.
** Installation
*** If you are using Intellij IDEA
    In Intellij IDEA, this package needs to be installed only once,
    and then you can use it in all your projects.

    Installation steps are as follows:
    1. Create a new project from version control.
    2. As project source, give https://github.com/jarmohurri/ibadts.git
    3. Install git if asked to do that.
    4. After git has cloned the project, build the package jar file:
       1. Right click on file =build.xml=.
       2. Select =Add as Ant build file=.
       3. Select =Build -> ibadts -> <default target>=.
    5. After the build has finished, you can close the =ibadts=
       project. The package is ready to be used.

    After this, to use this package in a project:
    1. Select =File -> Project structure...=.
    2. Select =Modules=.
    3. Select =Dependencies=.
    4. Select =+ -> JARs or directories...=.
    5. This opens a file selector. Locate =ibadts.jar= and select it.
    6. Select =OK=.
*** If you are using git as your own version control system
    Just add this library as a submodule of your project:
    #+begin_src sh
      git submodule add https://github.com/jarmohurri/ibadts.git
    #+end_src

** Usage in Java
*** Available methods
    In addition to constructors, the classes contain the methods
    specified by the IB document on pseudocode in exams. To help in
    quick initialization, all classes also contain a helper method
    #+begin_src java :exports code
      public void add (T[] items)
    #+end_src
    which adds all the =items= of type =T= into the container, in the
    order they are in the array, using the \ldquo{}default\rdquo add
    operation of the data type (e.g., =push()= in case of a stack).
    
*** Example use of a collection
    #+begin_src java :exports both :classname CollectionExample :results output 
      import ibadts.IBCollection;

      class CollectionExample
      {
        public static void main (String[] args)
        {
          // construction of a collection of objects
          IBCollection<Object> objects = new IBCollection<> ();

          // initialize from integer array using wrapper class Integer
          objects.add (new Integer[] {19, 22}); 
          objects.addItem ("end"); // add a string

          // traverse (note: resetNext() not needed before 1st traversal)
          while (objects.hasNext ())
            System.out.println (objects.getNext ()); 
        }
      }
    #+end_src

    #+RESULTS:
    : 19
    : 22
    : end
*** Example use of a stack
    #+begin_src java :exports both :classname StackExample :results output 
      import ibadts.IBStack;

      class StackExample
      {
        public static void main (String[] args)
        {
          IBStack<String> bits = new IBStack<> ();
          int decimal = 1216;
    
          while (decimal > 0)
          {
            String digit;
            if (decimal % 2 == 0)
              digit = "zero";
            else
              digit = "one";
            bits.push (digit);
            decimal = decimal / 2;
          }
          while (!bits.isEmpty ())
            System.out.print (bits.pop () + " ");
        }
      }
    #+end_src

    #+RESULTS:
    : one zero zero one one zero zero zero zero zero zero 
*** Example use of a queue
    #+begin_src java :exports both :classname QueueExample :results output 
      import ibadts.IBQueue;

      class QueueExample
      {
        public static void main (String[] args)
        {
          IBQueue<String> line = new IBQueue<> ();
          for (int i = 0; i < 5; i++)
            line.enqueue ("slow customer " + i);
          line.enqueue ("hungry me");
          while (!line.isEmpty ())
            System.out.println ("Next! -> food for " + line.dequeue ());
        }
      }
       #+end_src

       #+RESULTS:
       : Next! -> food for slow customer 0
       : Next! -> food for slow customer 1
       : Next! -> food for slow customer 2
       : Next! -> food for slow customer 3
       : Next! -> food for slow customer 4
       : Next! -> food for hungry me

** License
   Copyright (C) 2020 Jarmo Hurri

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
