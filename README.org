* Java implementation of IB CS abstract data types
** IB collections, stacks, queues and binary trees in Java
   This repository contains Java classes that implement abstract data
   types used in IB Computer Science: collections, stacks, queues and
   binary search trees. Static (fixed-size) versions of stacks and
   queues are also included.
** Installation
*** If you are using Intellij IDEA
    In Intellij IDEA, this package needs to be installed only once,
    and then you can use it in all your projects.

    Installation steps are as follows:
    1. Create a new project from version control.
    2. As project source, give
       #+begin_example
       https://github.com/hurrja/ibadts.git
       #+end_example
    3. Install git if asked to do that.
    4. After git has cloned the project, verify that IDEA will use an
       appropriate version of Java:
       1. Select =File -> Project structure... -> Project=.
       2. Check that a version of Java is selected in =Project SDK=.
       3. Press =OK=.
    5. Build the package jar file:
       1. Right click on file =build.xml=.
       2. Select =Add as Ant build file=.
       3. Select =Build -> ibadts -> <default target>=.
    6. After the build has finished, you can close the =ibadts=
       project. The package is ready to be used.

    After this, to use this package in a project:
    1. Select =File -> Project structure...=.
    2. Select =Modules=.
    3. Select =Dependencies=.
    4. Select =+ -> JARs or directories...=.
    5. This opens a file selector. Locate =ibadts.jar= and select it.
    6. Select =OK=.
*** If you are using git as your own version control system
    Just add this library as a submodule of your project:
    #+begin_src sh
      git submodule add https://github.com/hurrja/ibadts.git
    #+end_src

** Order of traversal of =Collection=
   IB documentation of =Collection= does not describe any guarantee on
   order of the elements during traversal. No ordering would make this
   ADT similar to ADT =Bag= in computer science literature.

   In practice, however, there have been exam questions where the
   order of traversal is the one implied by the order of calls to
   =addItem()=. That is, items are traversed in the order they have
   been added. This implementation guarantees this ordering during
   traversal.

** Usage in Java
*** Available methods
    In addition to constructors, the classes for collections, stacks
    and queues contain the methods specified by the IB document on
    pseudocode in exams.

    Binary tree works on reference types that are =Comparable= to
    themselves (such as =int= and =String=). Binary tree contains
    methods for adding items, and pre-, in- and postorder
    traversal. The corresponding class methods =preorder()=,
    =inorder()= and =postorder()= return a reference to an =Iterable=,
    which can then be traversed in a =for-each=-loop. See below for an
    example of how to use these methods.

    To help in quick initialization, all classes also contain a helper
    method
    #+begin_src java :exports code
      public void add (T[] items)
    #+end_src
    which adds all the =items= of type =T= into the container, in the
    order they are in the array, using the \ldquo{}default\rdquo add
    operation of the data type (e.g., =push()= in case of a stack).

    For convenient printing, a method
    #+begin_src java :exports code
      public String toString ()
    #+end_src
    is also provided in \ldquo{}linear\rdquo classes collection, stack
    and queue. This method prints the array returned by the
    =toArray()= method of the underlying Java class.
*** Example use of a collection
    #+begin_src java :exports both :classname CollectionExample :results output 
      import ibadts.Collection;

      class CollectionExample
      {
        public static void main (String[] args)
        {
          // construction of a collection of objects
          Collection<Object> objects = new Collection<> ();

          // initialize from integer array using wrapper class Integer
          objects.add (new Integer[] {19, 22}); 

          System.out.println ("contents: " + objects); // print using convenience method
          objects.addItem ("end"); // add a string

          // traverse (note: resetNext() not needed before 1st traversal)
          while (objects.hasNext ())
            System.out.println (objects.getNext ()); 
        }
      }
    #+end_src

    #+RESULTS:
    : contents: [19, 22]
    : 19
    : 22
    : end
*** Example use of a stack
    #+begin_src java :exports both :classname StackExample :results output 
      import ibadts.Stack;

      class StackExample
      {
        public static void main (String[] args)
        {
          Stack<String> bits = new Stack<> ();
          int decimal = 1216;

          while (decimal > 0)
          {
            // figure out last bit
            String digit;
            if (decimal % 2 == 0)
              digit = "zero";
            else
              digit = "one";
            // push last bit
            bits.push (digit);
            decimal = decimal / 2;
          }

          // print bits, in reverse order
          while (!bits.isEmpty ())
            System.out.print (bits.pop () + " ");
        }
      }
    #+end_src

    #+RESULTS:
    : one zero zero one one zero zero zero zero zero zero 
*** Example use of a static queue
    #+begin_src java :exports both :classname QueueExample :results output 
      import ibadts.StaticQueue;

      class QueueExample
      {
        public static void main (String[] args)
        {
          StaticQueue<String> line = new StaticQueue<> (5);

          // adding elements while there is still space
          for (int i = 1; !line.isFull (); i++)
            line.enqueue ("customer " + i);

          // serving customers
          while (!line.isEmpty ())
            System.out.println ("Next! -> food for " + line.dequeue ());
        }
      }
       #+end_src

       #+RESULTS:
       : Next! -> food for customer 1
       : Next! -> food for customer 2
       : Next! -> food for customer 3
       : Next! -> food for customer 4
       : Next! -> food for customer 5
*** Example use of a binary search tree
    #+begin_src java :exports both :classname TreeExample :results output
      import ibadts.BinarySearchTree;

      class TreeExample
      {
        public static void main (String[] args)
        {
          // create tree and add some elements
          BinarySearchTree<String> tree = new BinarySearchTree<> ();
          tree.add ("Tarzan");
          tree.add ("Banana");
          tree.add ("Jane");
          tree.add ("Cheetah");
          tree.add ("Jane"); // will be discarded since already in tree

          // do a couple of searches
          for (String s : new String[] {"Giraffe", "Jane"})
            System.out.println ("looking for " + s + ": " + tree.find (s));

          // print size of tree
          System.out.println ("size of tree: " + tree.getSize ());

          // print depth of tree
          System.out.println ("depth of tree: " + tree.getDepth ());

          // different traversals
          for (String str : tree.inorder ())
            System.out.print (str + " ");
          System.out.println ();

          for (String str : tree.preorder ())
            System.out.print (str + " ");
          System.out.println ();

          for (String str : tree.postorder ())
            System.out.print (str + " ");
        }
      }
    #+end_src

    #+RESULTS:
    : looking for Giraffe: false
    : looking for Jane: true
    : size of tree: 4
    : depth of tree: 4
    : Banana Cheetah Jane Tarzan 
    : Tarzan Banana Jane Cheetah 
    : Cheetah Jane Banana Tarzan 

** License
   Copyright (C) 2020-2021 Jarmo Hurri

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
